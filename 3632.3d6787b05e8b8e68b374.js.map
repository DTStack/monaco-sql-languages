{"version":3,"file":"3632.3d6787b05e8b8e68b374.js","mappings":"uKAIO,IAAIA,EAAO,CACdC,SAAU,CACNC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEzBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,YAErCC,iBAAkB,CACd,CAAEH,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,OAGjBG,EAAW,CAClBC,aAAc,GACdC,aAAc,OACdC,SAAU,CACN,MACA,QACA,OACA,WACA,MACA,SACA,SACA,OACA,OACA,QACA,OACA,MACA,QACA,SACA,OACA,KACA,UAEJC,UAAW,CACP,IACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,MACA,KAEJC,QAAS,wBACTC,QAAS,wEACTC,mBAAoB,syBACpBC,oBAAqB,mEACrBC,UAAW,CACPC,KAAM,CAEF,CACI,wFACA,CAAC,OAAQ,GAAI,SAAU,GAAI,SAAU,GAAI,cAG7C,CACI,8EACA,CAAC,aAAc,GAAI,SAAU,GAAI,SAAU,GAAI,cAGnD,CACI,yEACA,CAAC,aAAc,GAAI,SAAU,GAAI,WAAY,GAAI,cAGrD,CAAEC,QAAS,eAEfC,UAAW,CAEP,CAAC,0BAA2B,CAAC,OAAQ,cAErC,CACI,iBACA,CACIC,MAAO,CACH,YAAa,CAAEC,MAAO,cACtB,WAAY,cAIxB,CAAEH,QAAS,eACX,CAAEA,QAAS,YAEX,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CACI,WACA,CACIE,MAAO,CACH,aAAc,WACd,WAAY,MAKxB,CAAC,yBAA0B,gBAC3B,CAAC,2BAA4B,gBAC7B,CAAC,WAAY,UACb,CAAC,KAAM,UACP,CAAC,QAAS,aAEV,CAAC,IAAK,SAAU,WAChB,CAAC,IAAK,YAEVE,QAAS,CACL,CACI,6BACA,CAAED,MAAO,2BAA4BE,KAAM,qBAGnDC,YAAa,CACT,CACI,aACA,CACIJ,MAAO,CACH,UAAW,CACP,CACIC,MAAO,2BACPE,KAAM,YAGd,WAAY,oBAIxB,CAAC,IAAK,mBAEVE,WAAY,CACR,CAAC,aAAc,IACf,CAAC,OAAQ,UAAW,YACpB,CAAC,UAAW,WACZ,CAAC,OAAQ,YAEbC,QAAS,CACL,CAAC,UAAW,WACZ,CAAC,OAAQ,UAAW,QACpB,CAAC,QAAS,YAEdC,OAAQ,CACJ,CAAC,OAAQ,CAAEN,MAAO,YAAaE,KAAM,sBACrC,CAAC,YAAa,UACd,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,SAAU,YAEpBK,uBAAwB,CACpB,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,SAAU,SAEpBC,iBAAkB,CACd,CAAC,KAAM,CAAER,MAAO,YAAaE,KAAM,SACnC,CAAC,IAAK,SAAU,2BAChB,CAAEL,QAAS","sources":["webpack://monaco-sql-languages/./node_modules/monaco-editor/esm/vs/basic-languages/hcl/hcl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"', notIn: ['string'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.hcl',\r\n    keywords: [\r\n        'var',\r\n        'local',\r\n        'path',\r\n        'for_each',\r\n        'any',\r\n        'string',\r\n        'number',\r\n        'bool',\r\n        'true',\r\n        'false',\r\n        'null',\r\n        'if ',\r\n        'else ',\r\n        'endif ',\r\n        'for ',\r\n        'in',\r\n        'endfor'\r\n    ],\r\n    operators: [\r\n        '=',\r\n        '>=',\r\n        '<=',\r\n        '==',\r\n        '!=',\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '%',\r\n        '&&',\r\n        '||',\r\n        '!',\r\n        '<',\r\n        '>',\r\n        '?',\r\n        '...',\r\n        ':'\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,\r\n    terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,\r\n    tokenizer: {\r\n        root: [\r\n            // highlight main blocks\r\n            [\r\n                /^@terraformMainBlocks([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\r\n                ['type', '', 'string', '', 'string', '', '@brackets']\r\n            ],\r\n            // highlight all the remaining blocks\r\n            [\r\n                /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)(\\{)/,\r\n                ['identifier', '', 'string', '', 'string', '', '@brackets']\r\n            ],\r\n            // highlight block\r\n            [\r\n                /(\\w+[ \\t]+)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)([ \\t]*)([\\w-]+|\"[\\w-]+\"|)(=)(\\{)/,\r\n                ['identifier', '', 'string', '', 'operator', '', '@brackets']\r\n            ],\r\n            // terraform general highlight - shared with expressions\r\n            { include: '@terraform' }\r\n        ],\r\n        terraform: [\r\n            // highlight terraform functions\r\n            [/@terraformFunctions(\\()/, ['type', '@brackets']],\r\n            // all other words are variables or keywords\r\n            [\r\n                /[a-zA-Z_]\\w*-*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'variable'\r\n                    }\r\n                }\r\n            ],\r\n            { include: '@whitespace' },\r\n            { include: '@heredoc' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'operator',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d[\\d']*/, 'number'],\r\n            [/\\d/, 'number'],\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"/, 'string', '@string'],\r\n            [/'/, 'invalid']\r\n        ],\r\n        heredoc: [\r\n            [\r\n                /<<[-]*\\s*[\"]?([\\w\\-]+)[\"]?/,\r\n                { token: 'string.heredoc.delimiter', next: '@heredocBody.$1' }\r\n            ]\r\n        ],\r\n        heredocBody: [\r\n            [\r\n                /([\\w\\-]+)$/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S2': [\r\n                            {\r\n                                token: 'string.heredoc.delimiter',\r\n                                next: '@popall'\r\n                            }\r\n                        ],\r\n                        '@default': 'string.heredoc'\r\n                    }\r\n                }\r\n            ],\r\n            [/./, 'string.heredoc']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n            [/#.*$/, 'comment']\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        string: [\r\n            [/\\$\\{/, { token: 'delimiter', next: '@stringExpression' }],\r\n            [/[^\\\\\"\\$]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@popall']\r\n        ],\r\n        stringInsideExpression: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        stringExpression: [\r\n            [/\\}/, { token: 'delimiter', next: '@pop' }],\r\n            [/\"/, 'string', '@stringInsideExpression'],\r\n            { include: '@terraform' }\r\n        ]\r\n    }\r\n};\r\n"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","terraformFunctions","terraformMainBlocks","tokenizer","root","include","terraform","cases","token","heredoc","next","heredocBody","whitespace","comment","string","stringInsideExpression","stringExpression"],"sourceRoot":""}
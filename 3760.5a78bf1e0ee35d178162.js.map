{"version":3,"file":"3760.5a78bf1e0ee35d178162.js","mappings":"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","sources":["webpack://monaco-sql-languages/./node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar namedLiterals = ['true', 'false'];\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<', '>']\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: \"'\", close: \"'\", notIn: ['string'] }\n    ],\n    autoCloseBefore: \".,=}])>' \\n\\t\",\n    indentationRules: {\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.proto',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\n    keywords: [\n        'syntax',\n        'import',\n        'weak',\n        'public',\n        'package',\n        'option',\n        'repeated',\n        'oneof',\n        'map',\n        'reserved',\n        'to',\n        'max',\n        'enum',\n        'message',\n        'service',\n        'rpc',\n        'stream',\n        'returns',\n        'package',\n        'optional',\n        'true',\n        'false'\n    ],\n    builtinTypes: [\n        'double',\n        'float',\n        'int32',\n        'int64',\n        'uint32',\n        'uint64',\n        'sint32',\n        'sint64',\n        'fixed32',\n        'fixed64',\n        'sfixed32',\n        'sfixed64',\n        'bool',\n        'string',\n        'bytes'\n    ],\n    operators: ['=', '+', '-'],\n    namedLiterals: namedLiterals,\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n    identifier: /[a-zA-Z]\\w*/,\n    fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n    optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n    messageName: /@identifier/,\n    enumName: /@identifier/,\n    messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n    enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n    floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n    exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n    boolLit: /true\\b|false\\b/,\n    decimalLit: /[1-9][0-9]*/,\n    octalLit: /0[0-7]*/,\n    hexLit: /0[xX][0-9a-fA-F]+/,\n    type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n    keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            [/syntax/, 'keyword'],\n            [/=/, 'operators'],\n            [/;/, 'delimiter'],\n            [\n                /(\")(proto3)(\")/,\n                ['string.quote', 'string', { token: 'string.quote', switchTo: '@topLevel.proto3' }]\n            ],\n            [\n                /(\")(proto2)(\")/,\n                ['string.quote', 'string', { token: 'string.quote', switchTo: '@topLevel.proto2' }]\n            ]\n        ],\n        topLevel: [\n            // whitespace\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/=/, 'operators'],\n            [/[;.]/, 'delimiter'],\n            [\n                /@fullIdentifier/,\n                {\n                    cases: {\n                        option: { token: 'keyword', next: '@option.$S2' },\n                        enum: { token: 'keyword', next: '@enumDecl.$S2' },\n                        message: { token: 'keyword', next: '@messageDecl.$S2' },\n                        service: { token: 'keyword', next: '@serviceDecl.$S2' },\n                        extend: {\n                            cases: {\n                                '$S2==proto2': { token: 'keyword', next: '@extendDecl.$S2' }\n                            }\n                        },\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }\n            ]\n        ],\n        enumDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@enumBody.$S2' }]\n        ],\n        enumBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/=/, 'operators'],\n            [/;/, 'delimiter'],\n            [/option\\b/, 'keyword', '@option.$S2'],\n            [/@identifier/, 'identifier'],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        messageDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@messageBody.$S2' }]\n        ],\n        messageBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/=/, 'operators'],\n            [/;/, 'delimiter'],\n            [\n                '(map)(s*)(<)',\n                ['keyword', 'white', { token: '@brackets', bracket: '@open', next: '@map.$S2' }]\n            ],\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        option: { token: 'keyword', next: '@option.$S2' },\n                        enum: { token: 'keyword', next: '@enumDecl.$S2' },\n                        message: { token: 'keyword', next: '@messageDecl.$S2' },\n                        oneof: { token: 'keyword', next: '@oneofDecl.$S2' },\n                        extensions: {\n                            cases: {\n                                '$S2==proto2': { token: 'keyword', next: '@reserved.$S2' }\n                            }\n                        },\n                        reserved: { token: 'keyword', next: '@reserved.$S2' },\n                        '(?:repeated|optional)': { token: 'keyword', next: '@field.$S2' },\n                        required: {\n                            cases: {\n                                '$S2==proto2': { token: 'keyword', next: '@field.$S2' }\n                            }\n                        },\n                        '$S2==proto3': { token: '@rematch', next: '@field.$S2' }\n                    }\n                }\n            ],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        extendDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@extendBody.$S2' }]\n        ],\n        extendBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/(?:repeated|optional|required)/, 'keyword', '@field.$S2'],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        options: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/@optionName/, 'annotation'],\n            [/[()]/, 'annotation.brackets'],\n            [/=/, 'operator'],\n            [/\\]/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        option: [\n            { include: '@whitespace' },\n            [/@optionName/, 'annotation'],\n            [/[()]/, 'annotation.brackets'],\n            [/=/, 'operator', '@pop']\n        ],\n        oneofDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@oneofBody.$S2' }]\n        ],\n        oneofBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/(@identifier)(\\s*)(=)/, ['identifier', 'white', 'delimiter']],\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        '@builtinTypes': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        reserved: [\n            { include: '@whitespace' },\n            [/,/, 'delimiter'],\n            [/;/, 'delimiter', '@pop'],\n            { include: '@constant' },\n            [/to\\b|max\\b/, 'keyword']\n        ],\n        map: [\n            { include: '@whitespace' },\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        '@builtinTypes': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/,/, 'delimiter'],\n            [/>/, { token: '@brackets', bracket: '@close', switchTo: 'identifier' }]\n        ],\n        field: [\n            { include: '@whitespace' },\n            [\n                'group',\n                {\n                    cases: {\n                        '$S2==proto2': { token: 'keyword', switchTo: '@groupDecl.$S2' }\n                    }\n                }\n            ],\n            [/(@identifier)(\\s*)(=)/, ['identifier', 'white', { token: 'delimiter', next: '@pop' }]],\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        '@builtinTypes': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ]\n        ],\n        groupDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            ['=', 'operator'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@messageBody.$S2' }],\n            { include: '@constant' }\n        ],\n        type: [\n            { include: '@whitespace' },\n            [/@identifier/, 'type.identifier', '@pop'],\n            [/./, 'delimiter']\n        ],\n        identifier: [{ include: '@whitespace' }, [/@identifier/, 'identifier', '@pop']],\n        serviceDecl: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            [/{/, { token: '@brackets', bracket: '@open', switchTo: '@serviceBody.$S2' }]\n        ],\n        serviceBody: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            [/option\\b/, 'keyword', '@option.$S2'],\n            [/rpc\\b/, 'keyword', '@rpc.$S2'],\n            [/\\[/, { token: '@brackets', bracket: '@open', next: '@options.$S2' }],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        rpc: [\n            { include: '@whitespace' },\n            [/@identifier/, 'identifier'],\n            [/\\(/, { token: '@brackets', bracket: '@open', switchTo: '@request.$S2' }],\n            [/{/, { token: '@brackets', bracket: '@open', next: '@methodOptions.$S2' }],\n            [/;/, 'delimiter', '@pop']\n        ],\n        request: [\n            { include: '@whitespace' },\n            [\n                /@messageType/,\n                {\n                    cases: {\n                        stream: { token: 'keyword', next: '@type.$S2' },\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/\\)/, { token: '@brackets', bracket: '@close', switchTo: '@returns.$S2' }]\n        ],\n        returns: [\n            { include: '@whitespace' },\n            [/returns\\b/, 'keyword'],\n            [/\\(/, { token: '@brackets', bracket: '@open', switchTo: '@response.$S2' }]\n        ],\n        response: [\n            { include: '@whitespace' },\n            [\n                /@messageType/,\n                {\n                    cases: {\n                        stream: { token: 'keyword', next: '@type.$S2' },\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            [/\\)/, { token: '@brackets', bracket: '@close', switchTo: '@rpc.$S2' }]\n        ],\n        methodOptions: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/;/, 'delimiter'],\n            ['option', 'keyword'],\n            [/@optionName/, 'annotation'],\n            [/[()]/, 'annotation.brackets'],\n            [/=/, 'operator'],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\/\\*/, 'comment', '@push'],\n            ['\\\\*/', 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        stringSingle: [\n            [/[^\\\\']+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        constant: [\n            ['@boolLit', 'keyword.constant'],\n            ['@hexLit', 'number.hex'],\n            ['@octalLit', 'number.octal'],\n            ['@decimalLit', 'number'],\n            ['@floatLit', 'number.float'],\n            [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n            [/'/, { token: 'string.quote', bracket: '@open', next: '@stringSingle' }],\n            [/{/, { token: '@brackets', bracket: '@open', next: '@prototext' }],\n            [/identifier/, 'identifier']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ],\n        prototext: [\n            { include: '@whitespace' },\n            { include: '@constant' },\n            [/@identifier/, 'identifier'],\n            [/[:;]/, 'delimiter'],\n            [/}/, { token: '@brackets', bracket: '@close', next: '@pop' }]\n        ]\n    }\n};\n"],"names":["conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","keywords","builtinTypes","operators","namedLiterals","escapes","identifier","fullIdentifier","optionName","messageName","enumName","messageType","enumType","floatLit","exponent","boolLit","decimalLit","octalLit","hexLit","type","keyType","tokenizer","root","include","switchTo","topLevel","cases","option","next","enum","message","service","extend","enumDecl","bracket","enumBody","messageDecl","messageBody","oneof","extensions","reserved","required","extendDecl","extendBody","options","oneofDecl","oneofBody","map","field","groupDecl","serviceDecl","serviceBody","rpc","request","stream","returns","response","methodOptions","comment","string","stringSingle","constant","whitespace","prototext"],"sourceRoot":""}
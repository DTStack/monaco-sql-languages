{"version":3,"file":"4028.783265a96e576509b2e4.js","mappings":"sLAKIA,EAAiB,CACjB,OACA,OACA,KACA,MACA,QACA,KACA,MACA,QACA,SACA,OACA,WACA,OACA,QACA,SACA,QACA,OAEOC,EAAO,CACdC,YAAa,iFACbC,SAAU,CACN,CAAC,UAAQ,UACT,CAAC,IAAK,KACN,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAExBC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAExBE,aAAc,CACV,CACIC,WAAY,IAAIC,OAAO,UAAYV,EAAeW,KAAK,KAAO,uCAAwC,KACtGC,UAAW,wBACXC,OAAQ,CACJC,aAAc,kCAGtB,CACIL,WAAY,IAAIC,OAAO,UAAYV,EAAeW,KAAK,KAAO,uCAAwC,KACtGE,OAAQ,CAAEC,aAAc,6BAIzBC,EAAW,CAClBC,aAAc,GACdC,aAAc,GACdC,YAAa,CACT,KACA,OACA,SACA,QACA,SACA,SACA,UACA,aACA,OACA,UACA,UACA,aACA,QACA,YACA,MACA,SACA,UACA,YACA,SACA,MACA,SACA,SACA,WACA,cACA,SACA,aAEJC,eAAgB,CACZ,MACA,SACA,WACA,UACA,aACA,OACA,UACA,OACA,UACA,aACA,WACA,SACA,cACA,QACA,QACA,OACA,OACA,OACA,SACA,MACA,QACA,SACA,gBACA,OACA,UACA,SACA,eACA,UACA,gBACA,UACA,QACA,SACA,OACA,QACA,OACA,eACA,QACA,QACA,aACA,iBACA,QACA,WACA,gBACA,OACA,SACA,aACA,aACA,SAEJC,UAAW,CAAC,OAAQ,SACpBC,UAAW,CAAC,KAAM,KAAM,IAAK,IAAK,KAAM,MACxCC,OAAQ,UACRC,WAAY,iBACZC,UAAW,CACPC,KAAM,CACF,CAAC,wBAAyB,uBAAwB,YAClD,CAAC,OAAQ,CAAEC,MAAO,WAAYC,SAAU,sBACxC,CAAC,OAAQ,CAAED,MAAO,WAAYC,SAAU,sBACxC,CAAC,oBAAqB,CAAC,iBAAkB,WAAY,mBACrD,CAAC,cAAe,CAAC,iBAAkB,CAAED,MAAO,WAAYE,KAAM,eAC9D,CAAC,iBAAkB,CAAC,iBAAkB,CAAEF,MAAO,WAAYE,KAAM,eACjE,CAAC,IAAK,kBACN,CAAC,KAAM,kBACP,CAAC,WAELC,QAAS,CACL,CAAC,2BAA4B,qBAAsB,QACnD,CAAC,IAAK,2BAEVC,SAAU,CACN,CACI,OACA,CACIJ,MAAO,WACPC,SAAU,0BAGlB,CACI,OACA,CACID,MAAO,WACPC,SAAU,0BAGlB,CAAC,OAAQ,iBAAkB,QAC3B,CAAC,YAAa,mBACd,CAAC,YAAa,mBACd,CAAC,UAAW,kBACZ,CAAC,IAAK,aACN,CAAC,eAELI,YAAa,CACT,CAAC,OAAQ,2BACT,CAAC,OAAQ,CAAEL,MAAO,0BAA2BC,SAAU,aACvD,CAAC,OAAQ,wBACT,CAAC,aAAc,uBAAwB,cACvC,CAAC,OAAQ,CAAED,MAAO,uBAAwBC,SAAU,aACpD,CAAEK,QAAS,eAEfC,UAAW,CACP,CAAC,+BACD,CAAC,OAAQ,wBACT,CAAC,eACD,CAAC,OAAQ,CAAEP,MAAO,uBAAwBE,KAAM,WAEpDM,WAAY,CACR,CAAC,cAAe,iBAChB,CAAC,UAAW,iBACZ,CAAC,UAAW,iBACZ,CAAC,OACD,CACI,UACA,CACIC,MAAO,CACH,aAAc,kBACd,WAAY,MAIxB,CAAC,MACD,CACI,cACA,CACIA,MAAO,CACH,aAAc,iBACd,kBAAmB,oBACnB,eAAgB,oBAChB,WAAY,qBAIxB,CAAC,SAAU","sources":["webpack://monaco-sql-languages/./node_modules/monaco-editor/esm/vs/basic-languages/liquid/liquid.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nvar EMPTY_ELEMENTS = [\n    'area',\n    'base',\n    'br',\n    'col',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'keygen',\n    'link',\n    'menuitem',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr'\n];\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    brackets: [\n        ['<!--', '-->'],\n        ['<', '>'],\n        ['{{', '}}'],\n        ['{%', '%}'],\n        ['{', '}'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '%', close: '%' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n            action: {\n                indentAction: languages.IndentAction.IndentOutdent\n            }\n        },\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: languages.IndentAction.Indent }\n        }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '',\n    builtinTags: [\n        'if',\n        'else',\n        'elseif',\n        'endif',\n        'render',\n        'assign',\n        'capture',\n        'endcapture',\n        'case',\n        'endcase',\n        'comment',\n        'endcomment',\n        'cycle',\n        'decrement',\n        'for',\n        'endfor',\n        'include',\n        'increment',\n        'layout',\n        'raw',\n        'endraw',\n        'render',\n        'tablerow',\n        'endtablerow',\n        'unless',\n        'endunless'\n    ],\n    builtinFilters: [\n        'abs',\n        'append',\n        'at_least',\n        'at_most',\n        'capitalize',\n        'ceil',\n        'compact',\n        'date',\n        'default',\n        'divided_by',\n        'downcase',\n        'escape',\n        'escape_once',\n        'first',\n        'floor',\n        'join',\n        'json',\n        'last',\n        'lstrip',\n        'map',\n        'minus',\n        'modulo',\n        'newline_to_br',\n        'plus',\n        'prepend',\n        'remove',\n        'remove_first',\n        'replace',\n        'replace_first',\n        'reverse',\n        'round',\n        'rstrip',\n        'size',\n        'slice',\n        'sort',\n        'sort_natural',\n        'split',\n        'strip',\n        'strip_html',\n        'strip_newlines',\n        'times',\n        'truncate',\n        'truncatewords',\n        'uniq',\n        'upcase',\n        'url_decode',\n        'url_encode',\n        'where'\n    ],\n    constants: ['true', 'false'],\n    operators: ['==', '!=', '>', '<', '>=', '<='],\n    symbol: /[=><!]+/,\n    identifier: /[a-zA-Z_][\\w]*/,\n    tokenizer: {\n        root: [\n            [/\\{\\%\\s*comment\\s*\\%\\}/, 'comment.start.liquid', '@comment'],\n            [/\\{\\{/, { token: '@rematch', switchTo: '@liquidState.root' }],\n            [/\\{\\%/, { token: '@rematch', switchTo: '@liquidState.root' }],\n            [/(<)([\\w\\-]+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/(<\\/)([\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/</, 'delimiter.html'],\n            [/\\{/, 'delimiter.html'],\n            [/[^<{]+/] // text\n        ],\n        comment: [\n            [/\\{\\%\\s*endcomment\\s*\\%\\}/, 'comment.end.liquid', '@pop'],\n            [/./, 'comment.content.liquid']\n        ],\n        otherTag: [\n            [\n                /\\{\\{/,\n                {\n                    token: '@rematch',\n                    switchTo: '@liquidState.otherTag'\n                }\n            ],\n            [\n                /\\{\\%/,\n                {\n                    token: '@rematch',\n                    switchTo: '@liquidState.otherTag'\n                }\n            ],\n            [/\\/?>/, 'delimiter.html', '@pop'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/] // whitespace\n        ],\n        liquidState: [\n            [/\\{\\{/, 'delimiter.output.liquid'],\n            [/\\}\\}/, { token: 'delimiter.output.liquid', switchTo: '@$S2.$S3' }],\n            [/\\{\\%/, 'delimiter.tag.liquid'],\n            [/raw\\s*\\%\\}/, 'delimiter.tag.liquid', '@liquidRaw'],\n            [/\\%\\}/, { token: 'delimiter.tag.liquid', switchTo: '@$S2.$S3' }],\n            { include: 'liquidRoot' }\n        ],\n        liquidRaw: [\n            [/^(?!\\{\\%\\s*endraw\\s*\\%\\}).+/],\n            [/\\{\\%/, 'delimiter.tag.liquid'],\n            [/@identifier/],\n            [/\\%\\}/, { token: 'delimiter.tag.liquid', next: '@root' }]\n        ],\n        liquidRoot: [\n            [/\\d+(\\.\\d+)?/, 'number.liquid'],\n            [/\"[^\"]*\"/, 'string.liquid'],\n            [/'[^']*'/, 'string.liquid'],\n            [/\\s+/],\n            [\n                /@symbol/,\n                {\n                    cases: {\n                        '@operators': 'operator.liquid',\n                        '@default': ''\n                    }\n                }\n            ],\n            [/\\./],\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        '@constants': 'keyword.liquid',\n                        '@builtinFilters': 'predefined.liquid',\n                        '@builtinTags': 'predefined.liquid',\n                        '@default': 'variable.liquid'\n                    }\n                }\n            ],\n            [/[^}|%]/, 'variable.liquid']\n        ]\n    }\n};\n"],"names":["EMPTY_ELEMENTS","conf","wordPattern","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","language","defaultToken","tokenPostfix","builtinTags","builtinFilters","constants","operators","symbol","identifier","tokenizer","root","token","switchTo","next","comment","otherTag","liquidState","include","liquidRaw","liquidRoot","cases"],"sourceRoot":""}
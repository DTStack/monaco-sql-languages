{"version":3,"file":"4188.47ea330728ff825f4042.js","mappings":"uKAIO,IAAIA,EAAO,CACdC,SAAU,CACNC,aAAc,CAAC,KAAM,MACrBC,YAAa,MAEjBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WACjC,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WACjC,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WACjC,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WACjC,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,YAErCC,iBAAkB,CACd,CAAEH,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,OAGjBG,EAAW,CAClBC,aAAc,GACdC,aAAc,QACdC,SAAU,CACN,SACA,UACA,SACA,SACA,SACA,KACA,OACA,OACA,SACA,SACA,WAEJC,MAAO,CACH,KACA,UACA,OACA,MACA,SACA,SACA,OACA,OACA,MACA,OACA,QACA,QAEJC,UAAW,CACP,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,KACA,MACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,IACA,KACA,KAEJC,QAAS,4BACTC,QAAS,wEAETC,UAAW,CACPC,KAAM,CAEF,CACI,eACA,CACIC,MAAO,CACH,YAAa,UACb,SAAU,OACV,WAAY,gBAKxB,CAAEC,QAAS,eAEX,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CACI,WACA,CACID,MAAO,CACH,aAAc,YACd,WAAY,MAKxB,CAAC,6EAA8E,UAE/E,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBACpB,CAAC,IAAK,SAAU,YAEpBE,WAAY,CACR,CAAC,aAAc,IACf,CAAC,OAAQ,UAAW,YACpB,CAAC,UAAW,YAEhBC,QAAS,CACL,CAAC,UAAW,WACZ,CAAC,OAAQ,UAAW,QACpB,CAAC,QAAS,YAEdC,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,IAAK,SAAU","sources":["webpack://monaco-sql-languages/./node_modules/monaco-editor/esm/vs/basic-languages/flow9/flow9.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        blockComment: ['/*', '*/'],\n        lineComment: '//'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '(', close: ')', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: \"'\", close: \"'\", notIn: ['string'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: '<', close: '>' }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.flow',\n    keywords: [\n        'import',\n        'require',\n        'export',\n        'forbid',\n        'native',\n        'if',\n        'else',\n        'cast',\n        'unsafe',\n        'switch',\n        'default'\n    ],\n    types: [\n        'io',\n        'mutable',\n        'bool',\n        'int',\n        'double',\n        'string',\n        'flow',\n        'void',\n        'ref',\n        'true',\n        'false',\n        'with'\n    ],\n    operators: [\n        '=',\n        '>',\n        '<',\n        '<=',\n        '>=',\n        '==',\n        '!',\n        '!=',\n        ':=',\n        '::=',\n        '&&',\n        '||',\n        '+',\n        '-',\n        '*',\n        '/',\n        '@',\n        '&',\n        '%',\n        ':',\n        '->',\n        '\\\\',\n        '$',\n        '??',\n        '^'\n    ],\n    symbols: /[@$=><!~?:&|+\\-*\\\\\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@types': 'type',\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, 'delimiter'],\n            [/[<>](?!@symbols)/, 'delimiter'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }\n            ],\n            // numbers\n            [/((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ]\n    }\n};\n"],"names":["conf","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","types","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","string"],"sourceRoot":""}
{"version":3,"file":"9561.dae7e82fe1b7a53b2309.js","mappings":"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","sources":["webpack://monaco-sql-languages/./src/languageFeatures.ts","webpack://monaco-sql-languages/./src/setupLanguageMode.ts"],"sourcesContent":["import { debounce, LanguageServiceDefaults } from './_.contribution';\nimport { editor, Uri, IDisposable, MarkerSeverity } from './fillers/monaco-editor-core';\n\nexport interface WorkerAccessor<T> {\n\t(first: Uri, ...more: Uri[]): Promise<T>;\n}\n\nexport interface IWorker {\n\tdoValidation(uri: string): Promise<any>;\n\tvalid(code: string): Promise<any>;\n\tparserTreeToString(code: string): Promise<any>;\n}\n\nexport class DiagnosticsAdapter<T extends IWorker> {\n\tprivate _disposables: IDisposable[] = [];\n\tprivate _listener: { [uri: string]: IDisposable } = Object.create(null);\n\n\tconstructor(\n\t\tprivate _languageId: string,\n\t\tprivate _worker: WorkerAccessor<T>,\n\t\tdefaults: LanguageServiceDefaults\n\t) {\n\t\tconst onModelAdd = (model: editor.IModel): void => {\n\t\t\tlet modeId = model.getModeId();\n\t\t\tif (modeId !== this._languageId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._listener[model.uri.toString()] = model.onDidChangeContent(\n\t\t\t\tdebounce(() => {\n\t\t\t\t\tthis._doValidate(model.uri, modeId);\n\t\t\t\t}, 600)\n\t\t\t);\n\n\t\t\tthis._doValidate(model.uri, modeId);\n\t\t};\n\n\t\tconst onModelRemoved = (model: editor.IModel): void => {\n\t\t\teditor.setModelMarkers(model, this._languageId, []);\n\n\t\t\tlet uriStr = model.uri.toString();\n\t\t\tlet listener = this._listener[uriStr];\n\t\t\tif (listener) {\n\t\t\t\tlistener.dispose();\n\t\t\t\tdelete this._listener[uriStr];\n\t\t\t}\n\t\t};\n\n\t\tthis._disposables.push(editor.onDidCreateModel(onModelAdd));\n\t\tthis._disposables.push(editor.onWillDisposeModel(onModelRemoved));\n\t\tthis._disposables.push(\n\t\t\teditor.onDidChangeModelLanguage((event) => {\n\t\t\t\tonModelRemoved(event.model);\n\t\t\t\tonModelAdd(event.model);\n\t\t\t})\n\t\t);\n\n\t\tdefaults.onDidChange((_) => {\n\t\t\teditor.getModels().forEach((model) => {\n\t\t\t\tif (model.getModeId() === this._languageId) {\n\t\t\t\t\tonModelRemoved(model);\n\t\t\t\t\tonModelAdd(model);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis._disposables.push({\n\t\t\tdispose: () => {\n\t\t\t\tfor (let key in this._listener) {\n\t\t\t\t\tthis._listener[key].dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teditor.getModels().forEach(onModelAdd);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposables.forEach((d) => d && d.dispose());\n\t\tthis._disposables = [];\n\t}\n\n\tprivate _doValidate(resource: Uri, languageId: string): void {\n\t\tthis._worker(resource)\n\t\t\t.then((worker) => {\n\t\t\t\treturn worker.doValidation(editor.getModel(resource)?.getValue() || '');\n\t\t\t})\n\t\t\t.then((diagnostics) => {\n\t\t\t\tconst markers = diagnostics.map((d: any) => toDiagnostics(resource, d));\n\t\t\t\tlet model = editor.getModel(resource);\n\t\t\t\tif (model && model.getModeId() === languageId) {\n\t\t\t\t\teditor.setModelMarkers(model, languageId, markers);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(undefined, (err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t}\n}\n\nfunction toSeverity(lsSeverity: number): MarkerSeverity {\n\tswitch (lsSeverity) {\n\t\tdefault:\n\t\t\treturn MarkerSeverity.Error;\n\t}\n}\n\nfunction toDiagnostics(resource: Uri, diag: any): editor.IMarkerData {\n\tlet code = typeof diag.code === 'number' ? String(diag.code) : <string>diag.code;\n\n\treturn {\n\t\tseverity: toSeverity(diag.severity),\n\t\tstartLineNumber: diag.startLine,\n\t\tstartColumn: diag.startCol,\n\t\tendLineNumber: diag.endLine,\n\t\tendColumn: diag.endCol,\n\t\tmessage: diag.message,\n\t\tcode: code,\n\t\tsource: diag.source\n\t};\n}\n","import { WorkerManager } from './workerManager';\nimport { LanguageServiceDefaults } from './_.contribution';\nimport * as languageFeatures from './languageFeatures';\nimport { Uri, IDisposable } from './fillers/monaco-editor-core';\n\nexport function setupLanguageMode<T extends languageFeatures.IWorker>(\n\tdefaults: LanguageServiceDefaults\n): IDisposable {\n\tconst disposables: IDisposable[] = [];\n\tconst providers: IDisposable[] = [];\n\n\tconst client = new WorkerManager(defaults);\n\tdisposables.push(client);\n\n\tconst worker: languageFeatures.WorkerAccessor<T> = (...uris: Uri[]): Promise<any> => {\n\t\treturn client.getLanguageServiceWorker(...uris);\n\t};\n\n\tfunction registerProviders(): void {\n\t\tconst { languageId, modeConfiguration } = defaults;\n\n\t\tdisposeAll(providers);\n\n\t\tif (modeConfiguration.diagnostics) {\n\t\t\tproviders.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n\t\t}\n\t}\n\n\tregisterProviders();\n\n\tdisposables.push(asDisposable(providers));\n\n\treturn asDisposable(disposables);\n}\n\nfunction asDisposable(disposables: IDisposable[]): IDisposable {\n\treturn { dispose: () => disposeAll(disposables) };\n}\n\nfunction disposeAll(disposables: IDisposable[]) {\n\twhile (disposables.length) {\n\t\tdisposables.pop()?.dispose();\n\t}\n}\n"],"names":["DiagnosticsAdapter","_languageId","_worker","defaults","Object","create","onModelAdd","model","modeId","getModeId","_listener","uri","toString","onDidChangeContent","debounce","_doValidate","onModelRemoved","editor","uriStr","listener","dispose","this","_disposables","push","event","onDidChange","_","forEach","key","d","resource","languageId","then","worker","doValidation","getValue","diagnostics","markers","map","code","diag","String","severity","MarkerSeverity","startLineNumber","startLine","startColumn","startCol","endLineNumber","endLine","endColumn","endCol","message","source","undefined","err","console","error","setupLanguageMode","disposables","providers","client","WorkerManager","modeConfiguration","disposeAll","languageFeatures","getLanguageServiceWorker","asDisposable","length","pop"],"sourceRoot":""}